<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始</title>
      <link href="/2022/06/15/01-%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F/"/>
      <url>/2022/06/15/01-%E5%8D%9A%E5%AE%A2%E8%AF%9E%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<p>博客从这里开始</p><h2 id="为什么搭建？"><a href="#为什么搭建？" class="headerlink" title="为什么搭建？"></a>为什么搭建？</h2><p>搭建这个博客纯属一时兴起，觉得搭建一个自己的博客真的很酷诶!</p><p>而且还可以把自己从学java以来的点点滴滴记录下来，所以何乐而不为呢! </p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>我会整理一些个人所学知识的笔记发到博客上，或者分享一些我比较感兴趣的音乐、电影等。</p><h2 id="关于自己"><a href="#关于自己" class="headerlink" title="关于自己"></a>关于自己</h2><p>个人非常喜欢Adventurer（探险家）这个词，人生就是一场充满奇遇的冒险嘛，在路途中我们会遇到形形色色的人和事，不断去探索，去发现才是我们应该去做的事！</p><p>分享给大家一句祝福吧！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">·祝愿明天的你又比今天多了解了一些新的东西！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2022/06/15/Docker/"/>
      <url>/2022/06/15/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><img src="../images/image-20220630150035805.png" alt="image-20220630150035805"></p><p>自动生成</p><p><img src="/.io//..%5Cimages%5Cimage-20220630151152458.png" alt="image-20220630151152458"></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">package.name</span>=<span class="string">com.jingyu.docker</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/db2021?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure><p><img src="/.io//..%5Cimages%5Cimage-20220630150808798.png" alt="image-20220630150808798"></p><p><img src="/.io//..%5Cimages%5Cimage-20220630150647419.png" alt="image-20220630150647419"></p><p><img src="/.io//..%5Cimages%5Cimage-20220630150906050.png" alt="image-20220630150906050"></p><p><img src="/.io//..%5Cimages%5Cimage-20220630151210177.png" alt="image-20220630151210177"></p><p><img src="/.io//..%5Cimages%5Cimage-20220630151418265.png" alt="image-20220630151418265"></p><p><img src="/.io//..%5Cimages%5Cimage-20220630153247389.png" alt="image-20220630153247389"></p><p>这个位置启动报错因为yml格式要求严格，冒号后边跟空格 links和volumes目录下的冒号不用添加空格</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2022/06/15/Mybatis/"/>
      <url>/2022/06/15/Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h1><p>思路：搭建环境—&gt;导入Mybatis—&gt;编写代码—&gt;测试</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>搭建数据库</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `mybatis`;</span><br><span class="line"></span><br><span class="line">USE `mybatis`;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `user`(</span><br><span class="line">`id` INT(<span class="number">20</span>) NOT NULL PRIMARY KEY,</span><br><span class="line">`name` VARCHAR(<span class="number">30</span>) DEFAULT NULL,</span><br><span class="line">`pwd` VARCHAR(<span class="number">30</span>) DEFAULT NULL</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">①注意使用``来包括变量；②用的都是()；③最后一个没有,；④最后写上ENGINE；⑤utf8没有中间的-</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">INSERT INTO `user`(`id`,`name`,`pwd`) VALUES</span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;鲸鱼&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;猪杰&#x27;</span>,<span class="string">&#x27;654321&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;屁屁&#x27;</span>,<span class="string">&#x27;123123&#x27;</span>)</span><br></pre></td></tr></table></figure><p>新建项目：新建普通maven项目—&gt;删除src—&gt;导入maven依赖</p><h2 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a>创建一个模块</h2><ul><li><p>编写mybatis核心配置文件</p><p><strong>注：</strong>mybatis的核心配置文件以xml的方式放在resources底下 </p><p>​        最好不要有中文注释 </p><p>​        transaction事务管理</p><p>​        每一个Mapper.xml都需要在Mybatis核心配置文件中注册</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">&quot;JDBC&quot;</span>&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;password&quot;</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">&quot;com/jingyu/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>​        maven由于约定大于配置，写的配置文件，无法被导出或者生效的问题，解决方案：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在build中配置resources，防止资源导出失败</span></span><br><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.properties&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                    &lt;include&gt;**/</span>*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">                &lt;filtering&gt;<span class="literal">true</span>&lt;/filtering&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.properties&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                    &lt;include&gt;**/</span>*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">                &lt;filtering&gt;<span class="literal">true</span>&lt;/filtering&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.yml&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                    &lt;include&gt;**/</span>*.properties&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.xml&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">                &lt;filtering&gt;false&lt;/filtering&gt;</span></span><br><span class="line"><span class="comment">            &lt;/resource&gt;</span></span><br><span class="line"><span class="comment">            &lt;resource&gt;</span></span><br><span class="line"><span class="comment">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span></span><br><span class="line"><span class="comment">                &lt;includes&gt;</span></span><br><span class="line"><span class="comment">                    &lt;include&gt;**/</span>*.yml&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.properties&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                    &lt;include&gt;**/</span>*.xml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">                &lt;filtering&gt;<span class="literal">false</span>&lt;/filtering&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure><ul><li>编写mybatis工具类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了SqlSessionFactory，就可以从中获得SqlSession的实例</span></span><br><span class="line">    <span class="comment">//SqlSession完全包含了面向数据库执行SQL命令所需的所有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>实体类+Dao接口+接口实现类</p><p>接口实现类：由原来的UserDaoImpl转变为一个Mapper配置文件</p><p><strong>注：</strong>namespace=绑定一个对应的Dao/Mapper接口</p><p>​        &lt;&gt;里面的查询语句id对应的是Dao层里的方法</p><p>​        resultType返回一个结果List<User>结果集</User></p><p>​        paramType里面写别名！int的别名是_int</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.jingyu.dao.UserDao&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;getUserList&quot;</span> resultType=<span class="string">&quot;com.jingyu.pojo.User&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>junit</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//第一步：获得SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//方式一：getMapper</span></span><br><span class="line">            <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);<span class="comment">//面向接口编程，通过接口.class得到它所在的类，创造一个对象</span></span><br><span class="line">            List&lt;User&gt; userList = userMapper.getUserList();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line">            <span class="comment">//List&lt;User&gt; userList1 = sqlSession.selectList(&quot;com.jingyu.dao.UserDao.getUserList&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭SqlSession</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MapperRegistry是什么？</strong>核心配置文件中注册mappers</p><p>可能遇到的问题：配置文件没有注册+绑定接口错误+方法名不对+返回类型不对+Maven导出资源问题</p><p><strong>7步：</strong>pom.xml -&gt; mybatis-config.xml-&gt; MybatisUtils.java  -&gt; User.java -&gt; UserMapper.java(I) -&gt; UserMapper.xml -&gt; UserMapperTest.java（应该是对的）</p><h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p>namespace中的包名要和Dao、Mapper接口的包名一致</p><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>选择、查询语句：</p><ul><li>id：对应的namespace中的方法名</li><li>resultType：Sql语句执行的返回值</li><li>parametType：参数类型</li></ul><p>只需要更改UserMapper.java(I) -&gt; UserMapper.xml -&gt; UserMapperTest.java</p><p>​        1.编写接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据ID查询用户</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><p>​        2.编写对应的mapper的sql语句</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserById&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultType=<span class="string">&quot;com.jingyu.pojo.User&quot;</span>&gt;</span><br><span class="line">    select * from mybatis.user <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>​        3.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h2><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><p>注：增删改的test需要提交事务！！！</p><h2 id="分析错误"><a href="#分析错误" class="headerlink" title="分析错误"></a>分析错误</h2><ul><li>mybatis-config.xml文件中的mapper的resource需要/隔开包</li><li>空指针异常：不要重复定义</li><li>输出的xml文件中存在中文乱码问题</li><li>maven资源没有导出问题</li></ul><h2 id="万能map"><a href="#万能map" class="headerlink" title="万能map"></a>万能map</h2><p>假设我们的实体类，或者数据库中的表，字段或者参数过多，应当考虑使用Map</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能的Map</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">&quot;addUser2&quot;</span> parameterType=<span class="string">&quot;map&quot;</span>&gt;</span><br><span class="line">    insert into mybatis.user(id,name,pwd) values (#&#123;userid&#125;,#&#123;userName&#125;,#&#123;passWord&#125;);</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userid&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;阿屁&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;passWord&quot;</span>,<span class="string">&quot;334455&quot;</span>);</span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：select里面要写resultType &amp;&amp; 只要有User都要写全包名 &amp;&amp; 正常的方法的名字要与数据库的名字相同  &amp;&amp;  map法可以自己定义</p><p>Map传递参数，直接在sql中取出key即可 【parameterType=”map”】</p><p>对象传递参数，直接在sql中取对象的属性即可 【parameterType=”Object”】</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到 【可以不写】</p><p>多个参数用Map或者注解</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>模糊查询：容易存在sql注入，最好写死，在java代码中更改</p><p>​    1.Java代码执行的时候，传递通配符%%</p><p>​    2.在sql拼接中使用通配符</p><h1 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h1><h2 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h2><ul><li>mybatis-config.xml</li><li>MyBatis的配置文件包含了会深深影响MyBatis行为的设置和属性</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure><h2 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h2><ul><li>MyBatis可以配置成适应多种环境</li></ul><p>​      不过要记住：尽管可以配置多个环境，但每个SqlSessionFactory实例只能选择一种环境</p><ul><li>Mybatis默认的事务管理器是JDBC，连接池：POOLED</li></ul><h2 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h2><p>可以通过properti属性来实现引用配置文件</p><p>【db.properties】</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">username=root</span><br><span class="line">password=password</span><br></pre></td></tr></table></figure><p>核心文件中引入</p><p>注：在xml中，所有的标签都可以规定顺序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties resource=<span class="string">&quot;db.properties&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">&quot;development&quot;</span>&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">&quot;JDBC&quot;</span>&gt;&lt;/transactionManager&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">&quot;POOLED&quot;</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;driver&quot;</span> value=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">&quot;com/jingyu/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一字段，优先使用外部配置文件</li></ul><h2 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h2><ul><li>类型别名是为Java类型设置一个短的名字</li><li>存在的意义：仅在于用来减少类完全限定名的冗余</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;typeAlias type=<span class="string">&quot;com.jingyu.pojo.User&quot;</span> alias=<span class="string">&quot;User&quot;</span>&gt;&lt;/typeAlias&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><p>也可以指定一个包名，MyBatis会在包名下面搜索需要的Java Bean，比如：扫描实体类的包，默认别名就为这个类的类名，首字母小写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;<span class="keyword">package</span> name=<span class="string">&quot;com.jingyu.pojo&quot;</span>/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><p>在实体类少的时候使用第一种  &amp;&amp;  实体类多的时候使用第二种</p><p>第一种可以DIY别名（实体类注解指定别名），第二种不可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ul><li><p>settings</p></li><li><p>typeHandlers（类处理器）</p></li><li><p>objectFactory（对象工厂）</p></li></ul><h2 id="映射器（mappers）"><a href="#映射器（mappers）" class="headerlink" title="映射器（mappers）"></a>映射器（mappers）</h2><p>MapperRegistry：注册绑定我们的Mapper文件</p><p>方式一：【推荐使用】</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=<span class="string">&quot;com/jingyu/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><p>方式二：使用class文件绑定注册</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class=<span class="string">&quot;com.jingyu.dao.UserMapper&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><p>注：接口和它的Mapper配置文件必须同名</p><p>​         接口和它的Mapper配置文件必须在同一个包下</p><p>方式三：使用扫描包进行注入绑定</p><h2 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h2><p>并发问题</p><p><strong>SqlSessionFactoryBulider：</strong></p><ul><li>一旦创建SqlSessionFactory就不再需要</li><li>局部变量</li></ul><p><strong>SqlSessionFactory：</strong></p><ul><li>相当于数据库连接池</li><li>一旦创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃或重建一个新的实例</strong></li><li>最佳作用域是应用作用域</li><li>最简单的就是使用单例模式或静态单例模式</li></ul><p><strong>SqlSession：</strong></p><ul><li>连接到连接池的请求</li><li>SqlSession实例不是线程安全的，不能被共享，最佳作用域是请求或方法作用域</li><li>关闭请求：用完之后需要关闭，否则资源被占用</li></ul><h1 id="解决属性名和字段名不一致的问题"><a href="#解决属性名和字段名不一致的问题" class="headerlink" title="解决属性名和字段名不一致的问题"></a>解决属性名和字段名不一致的问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p><p>解决方法：起别名  &amp;&amp;  </p><h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><p>结果集映射</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">&quot;com.jingyu.dao.UserMapper&quot;</span>&gt;</span><br><span class="line">    <span class="comment">//结果集映射，这里的type的User是起别名之后的</span></span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;UserMap&quot;</span> type=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">    <span class="comment">//column数据库中的字段，property实体类的属性</span></span><br><span class="line">    <span class="comment">//什么不一样转什么</span></span><br><span class="line">    &lt;result column=<span class="string">&quot;pwd&quot;</span> property=<span class="string">&quot;password&quot;</span>/&gt;    </span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=<span class="string">&quot;getUserById&quot;</span> resultMap=<span class="string">&quot;UserMap&quot;</span>&gt;</span><br><span class="line">    select * from mybatis.user <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h2><p>设置中的logImpl：指定MyBatis所用日志的具体实现，未指定时将自动查找</p><p>掌握LOG4J  和   STDOUT_LOGGING标准日志输出</p><p>在Mybatis具体使用哪一个日志，在设置中设定</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=<span class="string">&quot;logImpl&quot;</span> value=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><p><img src="/.io//..%5Cimages%5Cimage-20220509164533135.png" alt="image-20220509164533135"></p><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>通过一个配置文件来灵活的进行配置，不许哟啊修改应用代码</p><ul><li>导入dependency</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.17</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>log4j.properties</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="line">log4j.rootLogger=DEBUG,console,file</span><br><span class="line"></span><br><span class="line">#控制台输出的相关设置</span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Target = System.out</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=[%c]-%m%n</span><br><span class="line"></span><br><span class="line">#文件输出的相关设置</span><br><span class="line">log4j.appender.file = org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.file.File=./log/jingyu.log</span><br><span class="line">log4j.appender.file.MaxFileSize=10mb</span><br><span class="line">log4j.appender.file.Threshold=DEBUG</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="line"></span><br><span class="line">#日志输出级别</span><br><span class="line">log4j.logger.org.mybatis=DEBUG</span><br><span class="line">log4j.logger.java.sql=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.ResultSet=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure><ul><li>配置log4j为日志的实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name=<span class="string">&quot;logImpl&quot;</span> value=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><ul><li>log4j的使用：直接测试运行</li></ul><p><strong>简单使用</strong></p><p>​    1.在使用Log4j的类中，导入包import org.apache.log4j.Logger;</p><p>​    2.日志对象，参数为当前类的class</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></table></figure><p>​    3.日志级别</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLog4j</span><span class="params">()</span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;info:进入了testLog4j:&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;debug:进入了testLog4j&quot;</span>);</span><br><span class="line">    logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><h2 id="使用Limit分页"><a href="#使用Limit分页" class="headerlink" title="使用Limit分页"></a>使用Limit分页</h2><p><strong>为什么使用分页：</strong>减少数据的处理量</p><p>原来：使用Limit分页</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SELECT * from user limit startIndex,pageSize;</span><br></pre></td></tr></table></figure><p>使用Mybatis实现分页，核心SQL</p><p>​    1.接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span>;</span><br></pre></td></tr></table></figure><p>​    2.Mapper.xml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserByLimit&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultType=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>​    3.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByLimit</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RowBounds分页"><a href="#RowBounds分页" class="headerlink" title="RowBounds分页"></a>RowBounds分页</h2><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><p>​    1.注解在接口上实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>​    2.需要在核心配置文件中绑定接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class=<span class="string">&quot;com.jingyu.dao.UserMapper&quot;</span>/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><p>​    3.测试使用</p><p>​        本质：反射机制实现</p><p>​        底层：动态代理</p><h2 id="Mybatis详细执行流程"><a href="#Mybatis详细执行流程" class="headerlink" title="Mybatis详细执行流程"></a>Mybatis详细执行流程</h2><h2 id="CRUD-1"><a href="#CRUD-1" class="headerlink" title="CRUD"></a>CRUD</h2><p>可以在工具类创建的时候实现自动提交事务（一般不要自动提交）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写接口，增加注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法存在多个参数，所有的参数必须加上@Param(&quot;id&quot;)注解</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">/*        List&lt;User&gt; users = mapper.getUsers();</span></span><br><span class="line"><span class="comment">        for (User user : users) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(user);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"><span class="comment">/*        User userById = mapper.getUserById(1);</span></span><br><span class="line"><span class="comment">        System.out.println(userById);*/</span></span><br><span class="line"><span class="comment">//        mapper.addUser(new User(6,&quot;Hello&quot;,&quot;123123123&quot;));</span></span><br><span class="line"><span class="comment">//        mapper.updateUser(new User(6,&quot;屁儿&quot;,&quot;121212&quot;));</span></span><br><span class="line">        mapper.deleteUser(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：必须将接口注册绑定到我们的核心配置文件中</p><p><strong>关于@Param()注解：</strong></p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型可以忽略，但建议加上</li><li>在SQL中引用的是我们这列的@Param()中设定的属性名</li></ul><h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><p>使用步骤：</p><p>​    1.在IDEA中安装Lombok插件</p><p>​    2.在项目中导入lombok的jar包</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.18</span><span class="number">.10</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>​    3.在实体类上加注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>:无参构造，get/set/toString/hashcode/equals</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br></pre></td></tr></table></figure><h1 id="多对一处理"><a href="#多对一处理" class="headerlink" title="多对一处理"></a>多对一处理</h1><p>association<strong>关联：</strong>多对一</p><p>collection<strong>集合：</strong>一对多</p><p>SQL:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(`id`,`name`)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;老师&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`(</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">KEY `fktid` (`tid`),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> `fktid` <span class="keyword">FOREIGN</span> KEY(`tid`) <span class="keyword">REFERENCES</span> `teacher`(`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`id`,`name`,`tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`id`,`name`,`tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`id`,`name`,`tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;小张&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`id`,`name`,`tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;小李&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student`(`id`,`name`,`tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;小王&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>测试环境搭建</strong></p><p>​    1.导入lombok</p><p>​    2.新建实体类Teacher、Student</p><p>​    3.建立Mapper接口</p><p>​    4.建立Mapper.xml文件</p><p>​    5.在核心配置文件中绑定注册我们的Mapper接口或者文件</p><p>​    6.测试查询</p><h2 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a><strong>按照查询嵌套处理</strong></h2><p>思路一（子查询）：1、查询所有的学生信息  2、根据查询出来的学生的tid寻找对应的老师</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getStudent&quot;</span> resultMap=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.student</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;StudentTeacher&quot;</span> type=<span class="string">&quot;Student&quot;</span>&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">        &lt;association property=<span class="string">&quot;teacher&quot;</span> column=<span class="string">&quot;tid&quot;</span> javaType=<span class="string">&quot;Teacher&quot;</span> select=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;getTeacher&quot;</span> resultType=<span class="string">&quot;Teacher&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.teacher <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getStudent2&quot;</span> resultMap=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span><br><span class="line">    select s.id sid,s.name sname,t.name tname</span><br><span class="line">    from mybatis.student s,mybatis.teacher t</span><br><span class="line">    where s.tid = t.id;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">&quot;StudentTeacher2&quot;</span> type=<span class="string">&quot;Student&quot;</span>&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;sid&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;sname&quot;</span>/&gt;</span><br><span class="line">    &lt;association property=<span class="string">&quot;teacher&quot;</span> javaType=<span class="string">&quot;Teacher&quot;</span>&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;tname&quot;</span>/&gt;</span><br><span class="line">    &lt;/association&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><p>回顾Mysql多对一查询方式：子查询+连表查询</p><h1 id="一对多处理"><a href="#一对多处理" class="headerlink" title="一对多处理"></a>一对多处理</h1><p>比如：一个老师拥有多个学生</p><p>对于老师而言，就是一对多的关系</p><p>1、环境搭建：跟刚才一样</p><p>修改实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getTeacher1&quot;</span> resultType=<span class="string">&quot;Teacher&quot;</span>&gt;</span><br><span class="line">    select * from mybatis.teacher</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;getTeacher&quot;</span> resultMap=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span><br><span class="line">    select s.id sid,s.name sname,t.name tname,t.id tid</span><br><span class="line">    from mybatis.student s,mybatis.teacher t</span><br><span class="line">    where s.tid = t.id and t.id = #&#123;tid&#125;;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">&quot;TeacherStudent&quot;</span> type=<span class="string">&quot;Teacher&quot;</span>&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;tid&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;tname&quot;</span>/&gt;</span><br><span class="line">    &lt;collection property=<span class="string">&quot;students&quot;</span> ofType=<span class="string">&quot;Student&quot;</span>&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;sid&quot;</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;name&quot;</span> column=<span class="string">&quot;sname&quot;</span>/&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;tid&quot;</span> column=<span class="string">&quot;tid&quot;</span>/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><h2 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getTeacher2&quot;</span> resultMap=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.teacher <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;tid&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;TeacherStudent2&quot;</span> type=<span class="string">&quot;Teacher&quot;</span>&gt;</span><br><span class="line">        &lt;collection property=<span class="string">&quot;students&quot;</span> javaType=<span class="string">&quot;ArrayList&quot;</span> ofType=<span class="string">&quot;Student&quot;</span> select=<span class="string">&quot;getStudentByTeacherId&quot;</span> column=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;getStudentByTeacherId&quot;</span> resultType=<span class="string">&quot;Student&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.student <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;tid&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><p>​    1.关联-association【多对一】</p><p>​    2.集合-collection【一对多】</p><p>​    3.javaType &amp; ofType</p><p>​                javaType：用来指定实体类中属性的类型</p><p>​                ofType：用来指定映射到List或者集合中的pojo类型，反省中的约束类型</p><p><em><strong>面试高频：</strong></em></p><ul><li><em>Mysql引擎+InnoDB底层原理+索引+索引优化</em></li></ul><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>动态SQL指不同的条件生成不同的SQL语句</p><p>if/choose(when,otherwise)/trim(where,set)/foreach</p><h2 id="搭建环境-1"><a href="#搭建环境-1" class="headerlink" title="搭建环境"></a>搭建环境</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog`(</span><br><span class="line">`id` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">`title`  <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">`author`  <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">`create_time`  DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`views`  <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8`blog`</span><br></pre></td></tr></table></figure><p>注：java中导入的date要是java类不要是sql类</p><h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;queryBlogIF&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultType=<span class="string">&quot;blog&quot;</span>&gt;</span><br><span class="line">     select * from mybatis.blog where <span class="number">1</span>=<span class="number">1</span></span><br><span class="line">     &lt;<span class="keyword">if</span> test=<span class="string">&quot;title != null&quot;</span>&gt;</span><br><span class="line">         <span class="type">and</span> <span class="variable">title</span> <span class="operator">=</span> #&#123;title&#125;</span><br><span class="line">     &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">     &lt;<span class="keyword">if</span> test=<span class="string">&quot;author != null&quot;</span>&gt;</span><br><span class="line">         <span class="type">and</span> <span class="variable">author</span> <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line">     &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"> &lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><p>类似于case</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;queryBlogChoose&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultType=<span class="string">&quot;blog&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.blog</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;choose&gt;</span><br><span class="line">                &lt;when test=<span class="string">&quot;title != null&quot;</span>&gt;</span><br><span class="line">                    title = #&#123;title&#125;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;when test=<span class="string">&quot;author != null&quot;</span>&gt;</span><br><span class="line">                    <span class="type">and</span> <span class="variable">author</span> <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line">                &lt;/when&gt;</span><br><span class="line">                &lt;otherwise&gt;</span><br><span class="line">                    <span class="type">and</span> <span class="variable">views</span> <span class="operator">=</span> #&#123;views&#125;</span><br><span class="line">                &lt;/otherwise&gt;</span><br><span class="line">            &lt;/choose&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="trim-where、set"><a href="#trim-where、set" class="headerlink" title="trim(where、set)"></a>trim(where、set)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;queryBlogIF&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultType=<span class="string">&quot;blog&quot;</span>&gt;</span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;title != null&quot;</span>&gt;</span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;author != null&quot;</span>&gt;</span><br><span class="line">            <span class="type">and</span> <span class="variable">author</span> <span class="operator">=</span> #&#123;author&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>所谓的动态SQL，本质还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码</p><h2 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h2><p><strong>SQL片段：</strong></p><p>​    1.使用SQL标签抽取公共的部分</p><p>​    2.在需要使用的地方使用include标签引用</p><p>注意：最好基于单表来定义SQL片段+不要存在where标签</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;queryBlogForeach&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultType=<span class="string">&quot;blog&quot;</span>&gt;</span><br><span class="line">        select * from mybatis.blog</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;foreach collection=<span class="string">&quot;ids&quot;</span> item=<span class="string">&quot;id&quot;</span> open=<span class="string">&quot;and (&quot;</span> close=<span class="string">&quot;)&quot;</span> separator=<span class="string">&quot;or&quot;</span>&gt;</span><br><span class="line">                id = #&#123;id&#125;</span><br><span class="line">            &lt;/foreach&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>数据库的主从复制</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/06/15/Linux/"/>
      <url>/2022/06/15/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里是基于Java全栈开发的Linux，不是运维级别的</p><p>Linux（CentOS 7）操作系统</p><p>消息队列（Kafka、RabbitMQ、RockeetMQ），缓存（Redis），搜索引擎（ES）</p><p>集群分布式（需要购买多台服务器，如果没有服务器，就只能使用虚拟机！）</p><p>Linux一切皆文件：文件只有两个操作读、写（权限）</p><p>【学习方式】</p><p>1 、认识Linux</p><p>2 、基本的命令（重点：Git讲了一些基本的命令（文件操作、目录管理、文件属性、Vim编辑器、账号<br>管理、磁盘管理,））</p><p>3 、软件的安装和部署！（java、tomcat、docker）linux-redis-docker</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口） 和<br>UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了<br>Unix <strong>以网络为核心</strong>的设计思想，是一个性能稳定的多用户网络操作系统。</p><p>通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL +<br>PHP）组合</p><h2 id="服务器相关知识"><a href="#服务器相关知识" class="headerlink" title="服务器相关知识"></a>服务器相关知识</h2><p>自己的远程仓库、远程数据库、远程tomcat搭建在服务器上</p><p>学生机</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>【本地】VMware+狂神的连接</p><p>【购买云服务器】阿里云+获取服务器ip地址&amp;重置服务器密码+安全组开放端口（用的都要开）</p><p>+xShell（端口22，远程连接）xFtp（端口21，文件上传）</p><p>【域名】需要自己买</p><p>【上传文件】</p><p><img src="/.io//..%5Cimages%5Cimage-20220522162641958.png" alt="image-20220522162641958"></p><p>【解压文件】【tar -zxvf】【注：tomcat需要java环境，用官方的jdk】</p><p><img src="/.io//..%5Cimages%5Cimage-20220522162743126.png" alt="image-20220522162743126"></p><p>【看项目】【ls -ll】</p><p><img src="/.io//..%5Cimages%5Cimage-20220522162946092.png" alt="image-20220522162946092"></p><p>【启动项目】【linux里面启动.sh】【./startup.sh】</p><h2 id="走进Linux系统"><a href="#走进Linux系统" class="headerlink" title="走进Linux系统"></a>走进Linux系统</h2><p>开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进<br>程”（daemon）。</p><p>Linux中，不报问题就是对的</p><p>【关机】【shutdown】</p><p>不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">sync # 将数据由内存同步到硬盘中。</span><br><span class="line"> </span><br><span class="line">shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><span class="line"> </span><br><span class="line">shutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机</span><br><span class="line"> </span><br><span class="line">shutdown –h now # 立马关机</span><br><span class="line"> </span><br><span class="line">shutdown –h 20:25 # 系统会在今天20:25关机</span><br><span class="line"> </span><br><span class="line">shutdown –h +10 # 十分钟后关机</span><br><span class="line"> </span><br><span class="line">shutdown –r now # 系统立马重启</span><br><span class="line"> </span><br><span class="line">shutdown –r +10 # 系统十分钟后重启</span><br><span class="line"> </span><br><span class="line">reboot # 就是重启，等同于 shutdown –r now</span><br><span class="line"> </span><br><span class="line">halt # 关闭系统，等同于shutdown –h now 和 poweroff</span><br></pre></td></tr></table></figure><p>1 、一切皆文件；2 、根目录 / ，所有的文件都挂载在这个节点下</p><p>【目录，文件】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/bin ： bin是Binary的缩写, 这个目录存放着最经常使用的命令。</span><br><span class="line">/boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。（不</span><br><span class="line">要动）</span><br><span class="line">/dev ： dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问</span><br><span class="line">文件的方式是相同的。</span><br><span class="line">/etc： 这个目录用来存放所有的系统管理所需要的配置文件和子目录。【重要】</span><br><span class="line">/home ：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账</span><br><span class="line">号命名的。【重要】</span><br><span class="line">/lib ： 这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。</span><br><span class="line">（不要动）（基本依赖库）</span><br><span class="line">/lost+found ： 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。（存放</span><br><span class="line">突然关机的一些文件）</span><br><span class="line">/media ：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备</span><br><span class="line">挂载到这个目录下。</span><br><span class="line">/mnt ：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，</span><br><span class="line">然后进入该目录就可以查看光驱里的内容了。（我们后面会把一些本地文件挂载在这个目录下）</span><br><span class="line">/opt ：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个</span><br><span class="line">目录下。默认是空的。【重要！】</span><br><span class="line">/proc ： 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获</span><br><span class="line">取系统信息。（不用管）</span><br><span class="line">/root ：该目录为系统管理员，也称作超级权限者的用户主目录。【重要】</span><br><span class="line">/sbin ：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</span><br><span class="line">/srv ：该目录存放一些服务启动之后需要提取的数据。</span><br><span class="line">/sys ：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统</span><br><span class="line">sysfs 。</span><br><span class="line">/tmp ：这个目录是用来存放一些临时文件的。用完即丢的文件，可以放在这个目录下，安装包！【重要】</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">/usr ：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows</span><br><span class="line">下的program files目录。【重要】</span><br><span class="line">/usr/bin： 系统用户使用的应用程序。</span><br><span class="line">/usr/sbin： 超级用户使用的比较高级的管理程序和系统守护程序。Super</span><br><span class="line">/usr/src： 内核源代码默认的放置目录。</span><br><span class="line">/var ：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录</span><br><span class="line">下。包括各种日志文件。</span><br><span class="line">/run ：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被</span><br><span class="line">删掉或清除。</span><br><span class="line">/www：存放服务器网站相关的资源，环境，网站的项目</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h1><h2 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h2><p>绝对路径、相对路径 </p><p>按键的上和下可以切换目录</p><p>可见文件，输入一点，按住Tab键，可以补全</p><p>【常用命令】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cd 切换目录命令！</span><br><span class="line"></span><br><span class="line">./ 当前目录</span><br><span class="line"></span><br><span class="line">cd .. 返回上一级目录</span><br><span class="line"></span><br><span class="line">ls 列出目录</span><br></pre></td></tr></table></figure><p>【参数】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">-a参数 all ，查看全部的文件，包括隐藏文件</span><br><span class="line"></span><br><span class="line">-l 参数 列出所有的文件，包含文件的属性和权限，没有隐藏文件</span><br></pre></td></tr></table></figure><p>【cd 命令 切换目录】</p><p>cd 目录名（绝对路径都是以 / 开头；相对路径，对于当前目录该如何寻找 ../../）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">pwd 显示当前用户所在的目录！</span><br><span class="line">mkdir 创建一个目录</span><br><span class="line">rmdir 删除目录</span><br></pre></td></tr></table></figure><p>【举例】</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@jingyu ~]# pwd</span><br><span class="line">/root</span><br><span class="line">[root@jingyu ~]# cd /bin</span><br><span class="line">[root@jingyu bin]# pwd</span><br><span class="line">/bin</span><br><span class="line">[root@jingyu bin]# cd /usr/local</span><br><span class="line">[root@jingyu local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line"></span><br><span class="line">[root@jingyu home]# mkdir test1 # 创建目录</span><br><span class="line">[root@jingyu home]# ls</span><br><span class="line">install.sh jingyu jingyu test1 www //白色代表文件，蓝色代表文件夹</span><br><span class="line">[root@jingyu home]# cd test</span><br><span class="line">[root@jingyu test1]# cd ..</span><br><span class="line">[root@jingyu home]# mkdir test2/test3/test4 # 想要创建多级目录，这样做是不行的</span><br><span class="line">mkdir: cannot create directory ‘test2/test3/test4’: No such file or directory</span><br><span class="line">[root@jingyu home]# mkdir -p test2/test3/test #递归创建目录</span><br><span class="line">[root@jingyu home]# ls</span><br><span class="line">install.sh jingyu jingyutest test1 test2 www</span><br><span class="line">[root@jingyu home]# cd test</span><br><span class="line">[root@jingyu test2]# ls</span><br><span class="line">test</span><br><span class="line">[root@jingyu test2]# cd test</span><br><span class="line">[root@jingyu test3]# ls</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>【删除】</p><p>rmdir 仅能删除空的目录，如果下面存在文件，需要先删除文件，递归删除多个目录 -p 参数即可</p><p>cp (复制文件或者目录) cp 文件 新的地方（如果文件重复，选择覆盖或放弃）</p><p><strong>rm （移除文件或者目录！）</strong></p><p>-f 忽略不存在的文件，不会出现警告，强制 删除！</p><p>-r 递归删除目录！</p><p>-i 互动，删除询问是否删除</p><p><code>rm -rf /  # 系统中所有的文件就被删除了，删库跑路就是这么操作的！</code></p><p><strong>mv 移动文件或者目录！重命名文件</strong></p><p>-f 强制</p><p>-u 只替换已经更新过的文件</p><h2 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h2><p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">当为[ d ]则是目录</span><br><span class="line">当为[ - ]则是文件；</span><br><span class="line">若是[ l ]则表示为链接文档 ( link file )；</span><br><span class="line">若是[ b ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</span><br><span class="line">若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</span><br></pre></td></tr></table></figure><p><img src="/.io//..%5Cimages%5Cimage-20220522174532485.png" alt="image-20220522174532485"></p><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>每个文件的属性由左边第一部分的 10 个字符来确定</p><p>从左至右用0-9这些数字来表示。<br>第 0 位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有<br>者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。<br>其中：<br>第 1 、 4 、 7 位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p><p>第 2 、 5 、 8 位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p><p>第 3 、 6 、 9 位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权<br>限。</p><h2 id="修改文件属性"><a href="#修改文件属性" class="headerlink" title="修改文件属性"></a>修改文件属性</h2><p><strong>1 、chgrp：更改文件属组</strong></p><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有<br>文件的属组都会更改。</p><p><strong>2 、chown：更改文件属主，也可以同时更改文件属组</strong> chown -R</p><p><strong>3 、chmod：更改文件 9 个属性（必须要掌握）</strong>【常用数字】chmod 777</p><p>你没有权限操作此文件！rwx 4 2 1</p><p>Linux文件属性有两种设置方法，一种是数字（常用的是数字），一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute<br>权限。</p><h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">cat 由第一行开始显示文件内容，用来读文章，或者读取配置文件啊，都使用cat名</span><br><span class="line">tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</span><br><span class="line">nl 显示的时候，顺道输出行号！ 看代码的时候，希望显示行号！ 【常用】</span><br><span class="line">more 一页一页显示文件内容（空格代表翻页，enter 代表向下看一行，:f 行号）</span><br><span class="line">less 与more类似，但比more更好，可以往前翻页（空格下翻页，pageDown，pageUp键代表翻动页面！退出 q 命令，查找字符串 /要查询的字符向下查询，向上查询使用？要查询的字符串，n 继续搜寻下一个，N 上寻找！）</span><br><span class="line">head 只看头几行</span><br><span class="line">tail 只看尾巴几行 -n 参数 要查看几行！</span><br></pre></td></tr></table></figure><p>可以使用 <em>man [</em> 命令 <em>]</em> 来查看各个命令的使用文档，如 ：man cp。</p><p>网络配置目录： <code>cd /etc/sysconfig/network-scripts</code></p><p>ifcofig命令查看网络配置！</p><h2 id="拓展Linux的链接"><a href="#拓展Linux的链接" class="headerlink" title="拓展Linux的链接"></a>拓展Linux的链接</h2><p>Linux的链接分为两种：硬链接、软链接！</p><p><strong>硬链接：</strong> A—B，假设B是A的硬链接，那么他们两个指向了同一个文件！允许一个文件拥有多个路径，用<br>户可以通过这种机制建立硬链接到一些重要文件上，防止误删！</p><p><strong>软链接：</strong> 类似Window下的快捷方式，删除的源文件，快捷方式也访问不了！</p><p>创建连接 ln 命令！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">touch 命令创建文件！</span><br><span class="line">echo 输入字符串,也可以输入到文件中！</span><br></pre></td></tr></table></figure><p>【举例】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[root@jingyu home]# touch f1 # 创建一个f1文件</span><br><span class="line">[root@jingyu home]# ls</span><br><span class="line">f1 install.sh jingyu www</span><br><span class="line">[root@jingyu home]# ln f1 f2 # 创建一个硬链接 f2</span><br><span class="line">[root@jingyu home]# ls</span><br><span class="line">f1 f2 install.sh jingyu www</span><br><span class="line">[root@jingyu home]# ln -s f1 f3 # 创建一个软链接（符号连接） f3</span><br><span class="line">[root@jingyu home]# ls</span><br><span class="line">f1 f2 f3 install.sh jingyu www</span><br><span class="line">[root@jingyu home]# ll</span><br><span class="line">total 28</span><br><span class="line">-rw-r--r-- 2 root root 0 Mar 24 20 :17 f1</span><br><span class="line">-rw-r--r-- 2 root root 0 Mar 24 20 :17 f2</span><br><span class="line">lrwxrwxrwx 1 root root 2 Mar 24 20 :18 f3 -&gt; f1</span><br><span class="line">-rw-r--r-- 1 root root 20078 Mar 4 16 :48 install.sh</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar 23 21 :25 jingyu</span><br><span class="line">drwxrw---x 2 www www 4096 Mar 23 12 :46 www</span><br><span class="line">[root@jingyu home]# echo &quot;i love jingyu&quot; &gt;&gt;f1 # 给f1文件中写入一些字符串！</span><br><span class="line">[root@jingyu home]# ls</span><br><span class="line">f1 f2 f3 install.sh jingyu www</span><br><span class="line">[root@jingyu home]# clear</span><br><span class="line">[root@jingyu home]# ll</span><br><span class="line">total 36</span><br><span class="line">-rw-r--r-- 2 root root 17 Mar 24 20 :19 f1</span><br><span class="line">-rw-r--r-- 2 root root 17 Mar 24 20 :19 f2</span><br><span class="line">lrwxrwxrwx 1 root root 2 Mar 24 20 :18 f3 -&gt; f1</span><br><span class="line">-rw-r--r-- 1 root root 20078 Mar 4 16 :48 install.sh</span><br><span class="line">drwxr-xr-x 2 root root 4096 Mar 23 21 :25 jingyu</span><br><span class="line">drwxrw---x 2 www www 4096 Mar 23 12 :46 www</span><br><span class="line">[root@jingyu home]# cat f1 # 查看f1</span><br><span class="line">i love jingyu</span><br><span class="line">[root@jingyu home]# cat f2 # 查看f2</span><br><span class="line">i love jingyu</span><br><span class="line">[root@jingyu home]# cat f3 # 查看f3</span><br><span class="line">i love jingyu</span><br></pre></td></tr></table></figure><h1 id="VIM编辑器"><a href="#VIM编辑器" class="headerlink" title="VIM编辑器"></a>VIM编辑器</h1><p>查看内容，编辑内容，保存内容！</p><p>三种使用模式基本上 vi/vim 共分为三种模式，分别是 <strong>命令模式（Command mode）</strong> ， <strong>输入模式（Insert mode）</strong> 和<strong>底线命令模式（Last line mode）</strong> 。这三种模式的作用分别是：</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>用户刚刚启动 vi/vim，便进入了命令模式。【新建/更改】</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字<br>符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">i 切换到输入模式，以输入字符。</span><br><span class="line">x 删除当前光标所在处的字符。</span><br><span class="line">: 切换到底线命令模式，以在最底一行输入命令。 如果是编辑模式，需要先退出编辑模式！ESC</span><br></pre></td></tr></table></figure><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h2 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h2><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">字符按键以及Shift组合 ，输入字符</span><br><span class="line">ENTER ，回车键，换行</span><br><span class="line">BACK SPACE ，退格键，删除光标前一个字符</span><br><span class="line">DEL ，删除键，删除光标后一个字符</span><br><span class="line">方向键 ，在文本中移动光标</span><br><span class="line">HOME / END ，移动光标到行首/行尾</span><br><span class="line">Page Up / Page Down ，上/下翻页</span><br><span class="line">Insert ，切换光标为输入/替换模式，光标将变成竖线/下划线</span><br><span class="line">ESC ，退出输入模式，切换到命令模式</span><br></pre></td></tr></table></figure><h2 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h2><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。光标就移动到了最底下，就可以在这里输入一<br>些底线命令了！</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：wq</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">q 退出程序</span><br><span class="line">w 保存文件</span><br></pre></td></tr></table></figure><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p>【完整的演示说明】</p><p>新建或者编辑文件，按 i 进入编辑模式，编写内容，编写完成后退出编辑模式，esc，退出之后进入底线<br>命令模式 ： wq 保存退出！</p><p>【Vim按键说明】</p><p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p><p><img src="/.io//..%5Cimages%5Cimage-20220522194928612.png" alt="image-20220522194928612"></p><p><img src="/.io//..%5Cimages%5Cimage-20220522194949455.png" alt="image-20220522194949455"></p><p><img src="/.io//..%5Cimages%5Cimage-20220522195003277.png" alt="image-20220522195003277"></p><p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p><p><img src="/.io//..%5Cimages%5Cimage-20220522195025199.png" alt="image-20220522195025199"></p><p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p><p><img src="/.io//..%5Cimages%5Cimage-20220522195039528.png" alt="image-20220522195039528"></p><h1 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h1><h2 id="添加账号-useradd"><a href="#添加账号-useradd" class="headerlink" title="添加账号 useradd"></a>添加账号 useradd</h2><p>useradd 选项 用户名</p><p>【参数说明：】</p><p>选项 :</p><p>​        -c comment 指定一段注释性描述。</p><p>​        -d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</p><p>​        -g 用户组 指定用户所属的用户组。</p><p>​        -G 用户组，用户组 指定用户所属的附加组。</p><p>​        -m 自动创建这个用户的主目录/home/jingyu        </p><p>​        -s Shell文件 指定用户的登录Shell。</p><p>​        -u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p><p>用户名 :</p><p>​        指定新账号的登录名。</p><p>增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。</p><h2 id="Linux下如何切换用户"><a href="#Linux下如何切换用户" class="headerlink" title="Linux下如何切换用户"></a>Linux下如何切换用户</h2><p>1.切换用户的命令为：<code>su username</code> 【username是你的用户名哦】</p><p>2.从普通用户切换到root用户，还可以使用命令：sudo su</p><p>3.在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</p><p>4.在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</p><p>$表示普通用户</p><p>#表示超级用户，也就是root用户</p><h2 id="删除帐号"><a href="#删除帐号" class="headerlink" title="删除帐号"></a>删除帐号</h2><p>删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用userdel命令，其格式如下：</p><p><code>userdel 选项 用户名</code></p><p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p><h2 id="修改账号"><a href="#修改账号" class="headerlink" title="修改账号"></a>修改账号</h2><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>修改已有用户的信息使用usermod命令，其格式如下：</p><p><code>usermod 选项 用户名</code></p><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><h2 id="用户的密码设置问题"><a href="#用户的密码设置问题" class="headerlink" title="用户的密码设置问题"></a>用户的密码设置问题</h2><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。</p><p>命令的格式为：<br><code>passwd 选项 用户名</code></p><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><p>【双击 重启】</p><p><img src="/.io//..%5Cimages%5Cimage-20220522202831966.png" alt="image-20220522202831966"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>属主、属组<br>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理（开发、测试、运维、<br>root）。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户<br>组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><p><code>创建一个用户组 groupadd</code></p><p>创建完用户组后可以得到一个组的id，这个id是可以指定的！ -g 520 ， 若果不指定就是自增 1</p><p><code>删除用户组 groupdel</code></p><p><code>修改用户组的权限信息和名字 groupmod -g -n</code></p><p>【用户切换当前组】</p><p><img src="/.io//..%5Cimages%5Cimage-20220522204031875.png" alt="image-20220522204031875"></p><p><img src="/.io//..%5Cimages%5Cimage-20220522204128233.png" alt="image-20220522204128233"></p><p><img src="/.io//..%5Cimages%5Cimage-20220522203838438.png" alt="image-20220522203838438"></p><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">df （列出文件系统整体的磁盘使用量） du（检查磁盘空间使用量！）</span><br></pre></td></tr></table></figure><p>挂载：mount</p><p>卸载：umount -f [挂载位置] 强制卸载</p><p>除了这个之外，以后我们安装了JDK ，其实可以使用java中的一些命令来查看信息！</p><p>df！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 登录当前用户 yuyu</span><br><span class="line">$ newgrp root</span><br><span class="line"></span><br><span class="line">用户名:口令(登录密码，我们不可见):用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure><p>du！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Mac 或者想使用Linux 挂载我们的一些本地磁盘或者文件！</span><br></pre></td></tr></table></figure><p>【挂载】</p><p>【卸载】umount -f [挂载位置]强制卸载</p><p>4.8 进程管理</p><p>Linux中一切皆文件</p><p>（文件：读写执行（查看，创建，删除，移动，复制，编辑），权限（用户、用户组）。系统：（磁<br>盘，进程））</p><p>对于我们开发人员来说，其实Linux更多偏向于使用即可！</p><p>【1】基本概念！</p><p>1 、在Linux中，每一个程序都是有自己的一个进程，每一个进程都有一个id号！</p><p>2 、每一个进程呢，都会有一个父进程！</p><p>3 、进程可以有两种存在方式：前台！后台运行！</p><p>4 、一般的话服务都是后台运行的，基本的程序都是前台运行的！</p><p>【2】命令</p><p><strong>ps</strong> 查看当前系统中正在执行的各种进程的信息！</p><p>ps -xx ：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">-a 显示当前终端运行的所有的进程信息（当前的进程一个）</span><br><span class="line">-u 以用户的信息显示进程</span><br><span class="line">-x 显示后台运行进程的参数！</span><br></pre></td></tr></table></figure><p>对于我们来说，这里目前只需要记住一个命令即可 ps -xx|grep 进程名字！ 过滤进程信息！</p><p><strong>ps -ef：可以查看到父进程的信息</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># ps -aux 查看所有的进程</span><br><span class="line">ps -aux|grep mysql</span><br><span class="line"></span><br><span class="line"># | 在Linux这个叫做管道符 A|B</span><br><span class="line"># grep 查找文件中符合条件的字符串！</span><br><span class="line"></span><br><span class="line">ps -ef|grep mysql # 看父进程我们一般可以通过目录树结构来查看！</span><br><span class="line"></span><br><span class="line"># 进程树！</span><br><span class="line">pstree -pu</span><br><span class="line">-p 显示父id</span><br><span class="line">-u 显示用户组</span><br></pre></td></tr></table></figure><p>结束进程：杀掉进程，等价于window结束任务！</p><p>kill -9 进程的id</p><p>但是啊，我们平时写的一个Java代码死循环了，可以选择结束进程！杀进程</p><h2 id="表示强制结束该进程！"><a href="#表示强制结束该进程！" class="headerlink" title="表示强制结束该进程！"></a>表示强制结束该进程！</h2><p>将Java程序打包发的时候讲解！ <code>nohup</code> ，代表后台执行程序</p><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><p>安装软件一般有三种方式：</p><ul><li>rpm（jdk：在线发布一个SpringBoot项目）</li><li>解压缩（tomcat，启动并通过外网访问，发布网站）</li><li>yum在线安装（docker：直接安装运行抛弃了docker就可以）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
